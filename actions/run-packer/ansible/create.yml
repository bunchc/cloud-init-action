---
- name:
    Create a Rackspace cloud server, wait for SSH and save
    instance metadata like server IP and ID for further consumption.
  hosts: localhost
  connection: local
  tasks:
    - name: Include debugging
      include_tasks: debug.yml
      when:
        - debug_workflow is defined
        - debug_workflow

    - name: Setup SSH to remote host
      include_tasks: ssh-setup.yml

    - name: Install Rackspace module dependencies
      pip:
        name: pyrax
        extra_args: --user --no-cache-dir
      when:
        - pip_pyrax is defined
        - pip_pyrax

    - name: Create OnMetal server
      block:
        - name: Delete old SSH key
          local_action:
            module: rax_keypair
            api_key: "{{ lookup('env', 'RACKSPACE_API_TOKEN') }}"
            username: "{{ lookup('env', 'RACKSPACE_USERNAME') }}"
            region: "{{ lookup('env', 'RACKSPACE_REGION') }}"
            name: "{{ ssh_key_name }}"
            state: absent
          ignore_errors: yes

        - name: Add SSH key to Rackspace account
          local_action:
            module: rax_keypair
            api_key: "{{ lookup('env', 'RACKSPACE_API_TOKEN') }}"
            username: "{{ lookup('env', 'RACKSPACE_USERNAME') }}"
            region: "{{ lookup('env', 'RACKSPACE_REGION') }}"
            name: "{{ ssh_key_name }}"
            public_key: "{{ lookup('env', 'RACKSPACE_SSH_PUB_KEY') }}"

        - name: "Create server"
          local_action:
            module: rax
            image: "{{ lookup('env', 'RACKSPACE_IMAGE') }}"
            api_key: "{{ lookup('env', 'RACKSPACE_API_TOKEN') }}"
            username: "{{ lookup('env', 'RACKSPACE_USERNAME') }}"
            region: "{{ lookup('env', 'RACKSPACE_REGION') }}"
            tenant_id: "{{ lookup('env', 'RACKSPACE_TENANT_ID') }}"
            flavor: "{{ lookup('env', 'RACKSPACE_FLAVOR') }}"
            #wait: yes
            name:  "{{ rax_servername }}"
            state: present
            #wait_timeout: "{{ '600' if lookup('env', 'RACKSPACE_FLAVOR') == 'onmetal-io2' else '300' }}"
            key_name: "{{ ssh_key_name }}"
          register: rackspace
          retries: 5
          delay: 10
          until: rackspace is succeeded

        - name: Wait until host has IP address assigned
          local_action:
            module: rax_facts
            api_key: "{{ lookup('env', 'RACKSPACE_API_TOKEN') }}"
            username: "{{ lookup('env', 'RACKSPACE_USERNAME') }}"
            region: "{{ lookup('env', 'RACKSPACE_REGION') }}"
            tenant_id: "{{ lookup('env', 'RACKSPACE_TENANT_ID') }}"
            id: "{{ rackspace.instances[0].id }}"
          retries: 5
          delay: 60
          until:
            - rax_accessipv4 is defined
            - rax_accessipv4 | ipv4

        - name: Set Host IP address
          set_fact:
            onmetal_ssh_ipv4: "{{ rax_accessipv4 }}"

        - name: "Wait for connection (SSH)"
          wait_for:
            host: "{{ onmetal_ssh_ipv4 }}"
            port: 22
            search_regex: OpenSSH
            delay: 60
            timeout: 900
          register: rax_ssh_connection
          retries: 5
          delay: 10
          until: rax_ssh_connection is succeeded

        - name: Try logins for one that works
          shell: |
            ssh -l {{ item }} \
              -o ForwardAgent=yes \
              -o ConnectTimeout=10 \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              {{ onmetal_ssh_ipv4 }}
          register: result
          ignore_errors: yes
          changed_when: False
          with_items: "{{ usernames }}"

        - name: "[Debug] Print result"
          debug:
            var: result
          when:
            - debug_workflow is defined
            - debug_workflow

        - name: Create inventory file with Rackspace server device details
          blockinfile:
            create: yes
            path: "{{ lookup('env', 'GITHUB_WORKSPACE') }}/inventory"
            block: |
              all:
                hosts:
                  metal:
                    ansible_host: {{ onmetal_ssh_ipv4 }}
                    ansible_port: 22
                    ansible_user: "{{ username }}"
                    ansible_ssh_common_args: '-o ForwardAgent=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
                    rackspace_device_id: {{ rackspace.instances[0].id }}
          when:
            - onmetal_ssh_ipv4 is defined
            - onmetal_ssh_ipv4 | ipv4
          ignore_errors: "{{ ansible_check_mode }}"

        - name: Create HOSTALIASES .hosts file, - a dynamic alternative of /etc/hosts
          blockinfile:
            create: yes
            path: "{{ lookup('env', 'GITHUB_WORKSPACE') }}/.hosts"
            block: |
              # see https://unix.stackexchange.com/a/226318/217844
              metal {{ rackspace.instances[0].rax_accessipv4 }}.xip.io
          ignore_errors: "{{ ansible_check_mode }}"

      rescue:
        - name: "[Fatal] Destroying Server"
          include_tasks: destroy_on_fail.yml
          ignore_errors: "{{ ansible_check_mode }}"
