---
# Sets up SSH on the container to communicate with OnMetal host
- hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Setup SSH to remote host
      include_tasks: ssh-setup.yml


# Establish connectivity with OnMetal host
- hosts: all
  strategy: free
  gather_facts: false
  vars:
    destroy_on_fail: "{{ lookup('env', 'RACKSPACE_DESTROY') }}"
    destroy_host: "{{ lookup('env', 'RACKSPACE_DESTROY') }}"
  tasks:
    - name: Establish connectivity
      block:
        - name: "Check for SSH availability"
          local_action:
            module: wait_for
            host: "{{ ansible_host | default(inventory_hostname) }}"
            port: "{{ ansible_port | default('22') }}"
            search_regex: OpenSSH
            delay: 60
            timeout: 900
          register: rax_ssh_connection
          retries: 5
          delay: 10
          until: rax_ssh_connection is succeeded
        - name: Install Python
          raw: test -e /usr/bin/python || ((sudo apt-get update && sudo apt-get install -y python-minimal) || (sudo apt-get update && sudo apt-get install -y python2-minimal && sudo ln -s /usr/bin/python2 /usr/bin/python))
        - name: Try Ansible Ping
          wait_for_connection:
            delay: 30
            timeout: 30
          register: ssh_connection
          retries: 10
          delay: 30
          until: ssh_connection is succeeded
      rescue:
        - name: "[Fatal] Destroying Server"
          include_tasks: destroy_on_fail.yml


# Provision OnMetal host
- hosts: all
  become: true
  become_method: sudo
  gather_facts: true
  strategy: free
  vars:
    destroy_on_fail: "{{ lookup('env', 'RACKSPACE_DESTROY') }}"
    destroy_host: "{{ lookup('env', 'RACKSPACE_DESTROY') }}"
    do_zfs: "{{ true if lookup('env', 'RACKSPACE_FLAVOR') == 'onmetal-io2' else false }}"
  roles:
  tasks:
    - name: Install packages
      block:
        # Update apt-cache to ensure up to date
        - name: "Updating Apt Cache (Debian)"
          apt:
            update_cache: yes
            cache_valid_time: 3600
          become: true
          when: ansible_os_family == "Debian"
        # Install Debian packages
        - name: "Installing Packages (Debian)"
          apt:
            name: "{{ debian_packages }}"
            state: present
          become: true
          when: ansible_os_family == "Debian"
        - name: Updating Python Modules
          block:
            - name: "Update Python Modules (PIP)"
              pip:
                name: "{{ item }}"
                state: latest
              become: true
              with_items:
                - pip
                - cffi
                - pyOpenSSL
              when: ansible_os_family != "Windows"
          rescue:
            - name: Downloading Pip Installer
              get_url:
                url: https://bootstrap.pypa.io/get-pip.py
                dest: /tmp/get-pip.py
            - name: Installing Python Pip
              command: python /tmp/get-pip.py
              become: true
        # Install Ansible to run Ansible related tasks within guest
        - name: Installing Ansible
          pip:
            name: ansible
            state: present
            version: "{{ ansible_ver }}"
          become: true
          when: ansible_os_family != "Windows"
        # Configure ZFS Mirror on OnMetal
        - name: Configure ZFS Mirror for OnMetal Hosts
          block:
            # Find out which disks are the > 1T NVMe
            - name: Get drives > 1TiB
              set_fact:
                #zpool_disks: "{{ zpool_disks|default([]) + [ item.key ] }}"
                zpool_disks: "{{ zpool_disks|default([]) + [ item.value.links.ids[0] ] }}"
              with_dict: "{{ ansible_devices }}"
              when: "{{ 'TB' in item.value.size }}"
            # Nuke old partitions on those disks
            - name: Read partitions from > 1TiB disks
              parted:
                device: "/dev/disk/by-id/{{ item }}"
                unit: MiB
              with_items: "{{ zpool_disks }}"
              register: disk_info
            - name: print disk_info
              debug:
                msg: "{{ disk_info }}"
            - name: Nuke those partitions
              parted:
                device: "{{ item.0.disk.dev }}"
                number: "{{ item.1.num }}"
                state: absent
              loop: "{{ disk_info.results|subelements('partitions') }}"
            # Setup ZFS pool on data disks for packer builds
            - name: Create a zfs pool on the > 1TiB disks
              command: zpool create -f virtual_machines /dev/disk/by-id/{{ zpool_disks | join (' /dev/disk/by-id/') }}
            - name: Set ZFS pools to mount on boot
              lineinfile:
                path: /etc/default/zfs
                state: present
                line: "ZFS_MOUNT='yes'"
                regexp: '^#?ZFS_MOUNT=.*'
            - name: Set ZFS pools to unmount on reboot
              lineinfile:
                path: /etc/default/zfs
                state: present
                line: "ZFS_UNMOUNT='yes'"
                regexp: '^#?ZFS_UNMOUNT=.*'
            # Create packer tempdir on NVMe
            - name: Create packer tempdir on NVMe
              file:
                path: /virtual_machines/tmp/
                state: directory
          when:
            - do_zfs is defined
            - do_zfs
      rescue:
        - name: "[Fatal] Destroying Server"
          include_tasks: destroy_on_fail.yml


- hosts: all
  become: true
  become_method: sudo
  strategy: free
  vars:
    destroy_on_fail: "{{ lookup('env', 'RACKSPACE_DESTROY') }}"
    destroy_host: "{{ lookup('env', 'RACKSPACE_DESTROY') }}"
  tasks:
    - name: Provision Host
      block:
        - name: Change Hostname
          include_role: 
            name: ansible-change-hostname
        - include_role:
            name: ansible-etc-hosts
        - include_role:
            name: ansible-timezone
        - include_role:
            name: ansible-hardening
        - include_role:
            name: ansible-kvm
        - include_role:
            name: ansible-packer
        - include_role:
            name: ansible-role-vagrant
      rescue:
        - name: "[Fatal] Destroying Server"
          include_tasks: destroy_on_fail.yml