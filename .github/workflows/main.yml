---
name: Build ESXi Image with Cloud-Init
on:  
  push:
    paths:
      - ".github/workflows/main.yml"

# Set rax api stuff globally
env:
  # Rackspace Cloud Settings
  RACKSPACE_API_TOKEN: ${{ secrets.RACKSPACE_API_TOKEN }} # Stored as a GH secret
  RACKSPACE_USERNAME: ${{ secrets.RACKSPACE_USERNAME }} # Stored as a GH secret
  RACKSPACE_REGION: ${{ secrets.RACKSPACE_REGION }} # IAD - Currently a secret, should be just set as a variable.
  RACKSPACE_SSH_PUB_KEY: ${{ secrets.RACKSPACE_SSH_PUB_KEY }} # Stored as a GH secret
  RACKSPACE_TENANT_ID: ${{ secrets.RACKSPACE_TENANT_ID }} # Stored as a GH secret
  RACKSPACE_FLAVOR: ${{ secrets.RACKSPACE_FLAVOR }} # onmetal-io2 - Stored as a GH secret, should be replaced with a variable
  RACKSPACE_IMAGE: ${{ secrets.RACKSPACE_IMAGE }} # 563929f6-4b68-4b1f-8403-d2371e78d913 - Stored as a GH secret, should be replaced with a variable
  # Playbook settings
  RACKSPACE_DEBUG: false # Run some debugging functions in the playbooks
  RACKSPACE_DESTROY: true # Destroy the onmetal host on failure and at the end of the run
  # Packer settings
  PACKER_LOG: "1" # Tells packer to emit verbose logs to the terminal
  PACKER_LOG_PATH: "/github/workspace/packer.log"   # Path for packer to dump logs to
  BUILD_TEMPLATE: "new-template.json"


jobs:
  # Build cloud-init and package into a vib
  build_vib:
    runs-on: ubuntu-latest
    container:
      image: 'docker://bunchc/cloud-init-action'
    name: Build cloud-init
    steps:
      - name: Build cloud-init
        id: build-step
        uses: bunchc/cloud-init-action@v2
      - name: Upload VIB
        uses: actions/upload-artifact@v2
        with:
          name: cloud-init-vib
          path: ${{ github.workspace }}/*.vib
          if-no-files-found: error


  # Build an OnMetal server
  build_packer_server:
    name: Build Packer Build Server
    runs-on: ubuntu-latest
    container:
      image: 'docker://bunchc/ironic-factory'
    steps:
      - name: Create OnMetal Server
        uses: 'bunchc/ironic_factory@v3'
        with:
          playbook: "/ansible/create.yml"
          verbosity: "-v"
      - name: Store ansible inventory
        uses: actions/upload-artifact@v2
        with:
          name: inventory
          path: ${{ github.workspace }}/inventory
          if-no-files-found: error


  # Use ansible to install and configure libvirt, kvm, and packer
  provision_packer_server:
    name: Provision Packer Build Server
    needs: build_packer_server
    runs-on: ubuntu-latest
    container:
      image: 'docker://bunchc/ironic-factory'
    steps:
      - name: Download inventory files
        uses: actions/download-artifact@v2
        with: 
          name: inventory
      - name: Run Ansible provisioning
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        uses: 'bunchc/ironic_factory@v3'
        with:
          inventory: "${GITHUB_WORKSPACE}/inventory"
          playbook: "/ansible/provision.yml"
          verbosity: "-v"


  # Use ansible to run packer builds
  run_packer_builds:
    name: Run Packer Builds
    needs: [build_vib, provision_packer_server]
    runs-on: ubuntu-latest
    container:
      image: 'docker://bunchc/ironic-factory'
    steps:
      - name: Download Ansible inventory
        uses: actions/download-artifact@v2
        with:
          name: inventory
      - name: Download cloud-init VIB
        uses: actions/download-artifact@v2
        with:
          name: cloud-init-vib
      - name: Run packer build
        env:
          ESXI_ISO_URL: ${{ secrets.ESXI_ISO_URL }}
          ESXI_ISO_CHECKSUM: ${{ secrets.ESXI_ISO_CHECKSUM }}
          PACKER_ESXI_REPO: ${{ secrets.PACKER_ESXI_REPO }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        uses: 'bunchc/ironic_factory@v3'
        with:
          inventory: "${GITHUB_WORKSPACE}/inventory"
          playbook: "/ansible/run-packer.yml"
          verbosity: "-v"


  # Destroy the server
  destroy_device:
    name: Destroy OnMetal Device
    needs: run_packer_builds
    runs-on: ubuntu-latest
    container:
      image: 'docker://bunchc/ironic-factory'
    if: ${{ always() }}
    steps:
      - name: Download inventory files
        uses: actions/download-artifact@v2
        with: 
          name: inventory
      - name: Destroy the OnMetal Device
        uses: 'bunchc/ironic_factory@v2'
        with:
          playbook: /ansible/destroy.yml